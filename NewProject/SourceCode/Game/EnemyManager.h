//=================================================================================
//
//    Enemy Manager header
//    Author : Lin He                                作成日 : 2018/09/15
//
//=================================================================================
#ifndef _ENEMY_MANAGER_H_
#define _ENEMY_MANAGER_H_

#include <list>
#include "Enemy.h"

//*****************************************************************************
// ネームスペース宣言
//*****************************************************************************
using std::list;

//*****************************************************************************
// EnemyManager Class
//*****************************************************************************
class EnemyManager
{
	public:
		static list<Enemy*> enemys_;

	public:

		static void InitEnemy();

		static void UninitEnemy();

		//=================================================================
		// [ 全Enemy更新関数 ]
		//=================================================================
		static void UpdateAllEnemy();

		//=================================================================
		// [ 全Enemy描画関数 ]
		//=================================================================
		static void DrawAllEnemy();

		//=================================================================
		// [ Enemy生成関数 ]
		//
		// [ Parameters ]
		// [float]	posX,posY : 生成する敵の座標
		// [ENEMY_TYPE]	type  : 生成する敵の種類
		//=================================================================
		static void CreateEnemy(float posX, float posY, ENEMY_TYPE type);

		//=================================================================
		// [ Enemy消滅関数 ]
		//
		// [ Parameters ]
		// [list<Enemy*>::iterator&]	itr : エネミーリストの中、消滅したいEnemyの参照
		//=================================================================
		static void DestoryEnemy(list<Enemy*>::iterator& itr);

		//=================================================================
		// [ Enemy全部消滅関数 ]
		//=================================================================
		static void DestoryAllEnemy();

		//=================================================================
		// [ Enemyリスト取得関数 ]
		//
		// [ Return ]
		// list<Enemy*>& : Enemyリストのリファレンス
		//=================================================================
		static list<Enemy*>& GetEnemyList();
};

#endif
